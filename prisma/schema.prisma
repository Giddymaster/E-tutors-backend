generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    STUDENT
    TUTOR
    ADMIN
    SUPPORT
}

model User {
    id              Int             @id @default(autoincrement())
    name            String
    email           String          @unique
    password        String
    role            Role            @default(STUDENT)
    tutorProfile    TutorProfile?
    supportProfile  SupportProfile?
    studentProfile  StudentProfile?
    refreshTokens   RefreshToken[]
    studentBookings Booking[]       @relation("studentBookings")
    createdAt       DateTime        @default(now())
}

model TutorProfile {
    id           Int       @id @default(autoincrement())
    userId       Int       @unique
    bio          String
    subjects     String[]
    hourlyRate   Float
    rating       Float?    @default(0)
    availability String?
    user         User      @relation(fields: [userId], references: [id])
    reviews      Review[]
    bookings     Booking[]
}

model Review {
    id        Int          @id @default(autoincrement())
    tutorId   Int
    studentId Int
    rating    Int
    comment   String
    createdAt DateTime     @default(now())
    tutor     TutorProfile @relation(fields: [tutorId], references: [id])
}

model SupportMessage {
    id          Int      @id @default(autoincrement())
    text        String
    userId      Int?
    userRole    Role?
    response    String?
    responderId Int?
    createdAt   DateTime @default(now())
}

model SupportProfile {
    id        Int      @id @default(autoincrement())
    userId    Int      @unique
    bio       String?
    teamTitle String?
    contact   String?
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
}

model StudentProfile {
    id                Int      @id @default(autoincrement())
    userId            Int      @unique
    major             String?
    year              String?
    interests         String[] @default([])
    preferredSubjects String[] @default([])
    bio               String?
    timezone          String?
    phone             String?
    availability      String?
    user              User     @relation(fields: [userId], references: [id])
    createdAt         DateTime @default(now())
}

model RefreshToken {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    userId    Int
    expiresAt DateTime
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
}

enum BookingStatus {
    PENDING
    ACCEPTED
    DECLINED
    CANCELLED
}

model Booking {
    id          Int           @id @default(autoincrement())
    studentId   Int
    tutorId     Int
    subject     String
    scheduledAt DateTime
    duration    Int // minutes
    price       Float
    status      BookingStatus @default(PENDING)
    createdAt   DateTime      @default(now())

    student User         @relation("studentBookings", fields: [studentId], references: [id])
    tutor   TutorProfile @relation(fields: [tutorId], references: [id])
}
